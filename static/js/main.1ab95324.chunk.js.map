{"version":3,"sources":["Resources/Icons/trash.png","components/todo.jsx","components/todo-form.jsx","Functions/functions.js","components/todo-list.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","todo","toggleComplete","onDelete","key","id","className","onClick","text","complete","src","trash","alt","TodoFom","state","pressEvent","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","placeholder","this","onChange","React","Component","AddTodo","ToggleComplete","todos","map","OnDelete","filter","TodoList","todoToShow","length","App","clasname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ab95324.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.77bf4917.png\";","import React from \"react\";\nimport \"../Css/todo.css\";\nimport trash from \"../Resources/Icons/trash.png\";\n\nexport default ({ todo, toggleComplete, onDelete }) => (\n  <div key={todo.id} className=\"todo\">\n    <div className=\"tododisplaynpm\" onClick={toggleComplete}>\n      <div className=\"id\">{todo.id}</div>\n      <div className=\"text\">{todo.text}</div>\n      <div className={!todo.complete ? \"incomplete\" : \"complete\"}>\n        {!todo.complete ? \"incomplete\" : \"complete\"}\n      </div>\n    </div>\n    <div onClick={onDelete}>\n      <img src={trash} className=\"deleteicon\" alt=\"deleteicon\" />\n    </div>\n  </div>\n);\n","import React from \"react\";\n\nexport default class TodoFom extends React.Component {\n  \n  state = {\n    text: \"\",\n    id: 1,\n  };\n\n  pressEvent = (event) =>\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.text !== \"\") {\n      this.props.onSubmit({\n        id: this.state.id,\n        text: this.state.text,\n        complete: false,\n      });\n      this.setState({\n        text: \"\",\n        id: this.state.id + 1,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <form className=\"addtodo\">\n        <input\n          name=\"text\"\n          placeholder=\"What do you want to do?\"\n          value={this.state.text}\n          onChange={this.pressEvent}\n        />\n        <button onClick={this.handleSubmit}>Add</button>\n      </form>\n    );\n  }\n}\n","\nexport function AddTodo(todo, props) {\n  return [todo, ...props];\n}\n\nexport function ToggleComplete(todos, id) {\n  let todo = [];\n\n  todo = todos.map((todo) => {\n    if (todo.id === id) {\n      return {\n        ...todo,\n        complete: !todo.complete,\n      };\n    } else {\n      return todo;\n    }\n  });\n\n  return todo;\n}\n\nexport function UpdateTodoToShow(choose) {\n  return choose;\n}\n\nexport function OnDelete(todos, id) {\n  return todos.filter((todo) => todo.id !== id);\n}\n","import React from \"react\";\nimport Todo from \"./todo\";\nimport TodoForm from \"./todo-form\";\nimport {\n  AddTodo,\n  ToggleComplete,\n  UpdateTodoToShow,\n  OnDelete,\n} from \"../Functions/functions\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nexport default class TodoList extends React.Component {\n  state = {\n    todo: [],\n    todoToShow: \"all\",\n  };\n\n  render() {\n    let todos = [];\n\n    if (this.state.todoToShow === \"all\") {\n      todos = this.state.todo;\n    } else if (this.state.todoToShow === \"incomplete\") {\n      todos = this.state.todo.filter((todo) => !todo.complete);\n    } else if (this.state.todoToShow === \"complete\") {\n      todos = this.state.todo.filter((todo) => todo.complete);\n    }\n\n    return (\n      <div className=\"mainBody\">\n        <h1>To-Do List</h1>\n        <TodoForm\n          onSubmit={(todo) =>\n            this.setState({ todo: AddTodo(todo, this.state.todo) })\n          }\n        /> \n        <div className=\"separators\">\n          <Tabs>\n            <TabList>\n              <Tab\n                onClick={() =>\n                  this.setState({ todoToShow: UpdateTodoToShow(\"all\") })\n                }\n              >\n                All\n              </Tab>\n              <Tab\n                onClick={() =>\n                  this.setState({ todoToShow: UpdateTodoToShow(\"incomplete\") })\n                }\n              >\n                Incomplete\n              </Tab>\n              <Tab\n                onClick={() =>\n                  this.setState({ todoToShow: UpdateTodoToShow(\"complete\") })\n                }\n              >\n                Complete\n              </Tab>\n            </TabList>\n            <TabPanel>\n              <h2>All To-Do</h2>\n            </TabPanel>\n            <TabPanel>\n              <h2>To-Do Incomplete</h2>\n            </TabPanel>\n            <TabPanel>\n              <h2>To-Do Complete</h2>\n            </TabPanel>\n          </Tabs>\n        </div>\n        {todos.map((todo) => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            toggleComplete={() =>\n              this.setState({ todo: ToggleComplete(this.state.todo, todo.id) })\n            }\n            onDelete={() =>\n              this.setState({ todo: OnDelete(this.state.todo, todo.id) })\n            }\n          />\n        ))}\n        <div className=\"todoincomplete\">\n          <p></p>\n          To-Do Incomplete:{\" \"}\n          {this.state.todo.filter((todo) => !todo.complete).length}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TodoList from './components/todo-list';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div clasname=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}